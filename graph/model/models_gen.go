// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateUserInput struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

type Item struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Quantity  int        `json:"quantity"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type Mutation struct {
}

type Order struct {
	ID         string       `json:"id"`
	Items      []*OrderItem `json:"items"`
	InvoiceURL *string      `json:"invoiceURL,omitempty"`
	CreatedAt  time.Time    `json:"createdAt"`
	UpdatedAt  time.Time    `json:"updatedAt"`
	DeletedAt  *time.Time   `json:"deletedAt,omitempty"`
}

type OrderItem struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Quantity  int        `json:"quantity"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type Query struct {
}

type School struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Address     *string    `json:"address,omitempty"`
	PhoneNumber *string    `json:"phoneNumber,omitempty"`
	Orders      []*Order   `json:"orders"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
	DeletedAt   *time.Time `json:"deletedAt,omitempty"`
}

type SchoolItem struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Quantity  int        `json:"quantity"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type SchoolOrder struct {
	ID          string        `json:"id"`
	School      *School       `json:"school,omitempty"`
	Items       []*SchoolItem `json:"items"`
	DeliveredAt *time.Time    `json:"deliveredAt,omitempty"`
	CreatedAt   time.Time     `json:"createdAt"`
	UpdatedAt   time.Time     `json:"updatedAt"`
}

type User struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Email     string     `json:"email"`
	Password  string     `json:"password"`
	Role      Role       `json:"role"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type Role string

const (
	RoleAdmin       Role = "ADMIN"
	RoleContributor Role = "CONTRIBUTOR"
)

var AllRole = []Role{
	RoleAdmin,
	RoleContributor,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleContributor:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
