package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/xsadia/secred/graph/model"
	"github.com/xsadia/secred/pkg/utils"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.CreateUserReturnType, error) {
	var emailExists bool
	err := r.DB.QueryRow("SELECT EXISTS (SELECT 1 FROM users WHERE email = $1)", input.Email).Scan(&emailExists)

	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	if emailExists {
		return nil, gqlerror.Errorf("email already in use")
	}

	hash, err := utils.HashPassword(input.Password)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	var id uuid.UUID

	err = r.DB.QueryRow(
		"INSERT INTO users (name, email, password) values ($1, $2, $3) returning id",
		input.Name, input.Email, hash).Scan(&id)

	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	token, err := utils.CreateJWT(id, utils.JWTExpireTime)
	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return &model.CreateUserReturnType{
		Me: &model.User{
			ID:        id.String(),
			Name:      input.Name,
			Email:     input.Email,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
			DeletedAt: nil,
		},

		Token: &token,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	id := ctx.Value("user")
	if id == nil {
		return nil, gqlerror.Errorf("Authorization required")
	}

	var user model.User
	err := r.DB.QueryRow(
		"SELECT id, name, email, created_at, updated_at, deleted_at FROM users where id = $1",
		id,
	).Scan(&user.ID, &user.Name, &user.Email, &user.CreatedAt, &user.UpdatedAt, &user.DeletedAt)

	if err == nil {
		return &user, nil
	}

	if err == sql.ErrNoRows {
		log.Println(err)
		return nil, gqlerror.Errorf("Authorization required")
	}

	return nil, gqlerror.Errorf("Unexpected error")
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

// Schools is the resolver for the schools field.
func (r *queryResolver) Schools(ctx context.Context) ([]*model.School, error) {
	panic(fmt.Errorf("not implemented: Schools - schools"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
