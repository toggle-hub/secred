# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Url
scalar Time

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type PageInfo {
  hasNextPage: Boolean!
}

type Item {
  id: ID!
  name: String!
  rawName: String!
  quantity: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type Items {
  nodes: [Item!]!
  pageInfo: PageInfo!
}

type Order {
  id: ID!
  orderItems: [OrderItem!]!
  invoiceURL: Url
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type OrderItem {
  id: ID!
  quantity: Int!
  item: Item!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

# type SchoolItem {
#   id: ID!
#   name: String!
#   quantity: Int!
#   createdAt: Time!
#   updatedAt: Time!
#   deletedAt: Time
# }

type SchoolOrderItem {
  id: ID!
  name: String!
  quantity: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type SchoolOrder {
  id: ID!
  schoolId: String!
  OrderItems: [SchoolOrderItem!]!
  createdAt: Time!
  updatedAt: Time!
  deliveredAt: Time
  deletedAt: Time
}

type School {
  id: ID!
  name: String!
  address: String
  phoneNumber: String
  orders: [SchoolOrder!]!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

type Schools {
  nodes: [School!]!
  pageInfo: PageInfo!
}

type Query {
  me: User
  items(page: Int = 1, limit: Int = 10): Items
  schools(page: Int = 1, limit: Int = 10): Schools
  orders: [Order!]!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

type CreateUserReturnType {
  me: User
  token: String
}

input CreateSchoolInput {
  name: String!
  address: String
  phoneNumber: String
}

input CreateItemInput {
  name: String!
  quantity: Int!
}

input CreateOrderItemInput {
  name: String!
  quantity: Int!
}

input CreateOrderInput {
  items: [CreateOrderItemInput!]!
  invoiceURL: Url
}

input CreateSchoolOrderInput {
  items: [CreateOrderItemInput!]!
  school: ID!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserReturnType
  createSchool(input: CreateSchoolInput!): School
  createOrder(input: CreateOrderInput!): Order
  createSchoolOrder(input: CreateSchoolOrderInput!): SchoolOrder
  createItem(input: CreateItemInput!): Item
}
